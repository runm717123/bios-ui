---
layout: _
---

<script>
  import { Input, InputLabel } from '@bios-ui/svelte';
</script>

# Input

A flexible input component with support for different types, labels, and validation states. Designed with accessibility and usability in mind.

## Default

<div class="demo-container">
  <Input placeholder="Enter text..." />
</div>

```svelte
<Input placeholder="Enter text..." />
```

## With Label

<div class="demo-container">
  <div style="display: flex; flex-direction: column; gap: 0.5rem; max-width: 300px;">
    <InputLabel for="example-input">Username</InputLabel>
    <Input id="example-input" placeholder="Enter username..." />
  </div>
</div>

```svelte
<InputLabel for="example-input">Username</InputLabel>
<Input id="example-input" placeholder="Enter username..." />
```

## Input Types

<div class="demo-container">
  <div class="demo-grid">
    <div class="demo-item">
      <Input type="text" placeholder="Text input" />
      <span class="demo-label">Text</span>
    </div>
    <div class="demo-item">
      <Input type="email" placeholder="email@example.com" />
      <span class="demo-label">Email</span>
    </div>
    <div class="demo-item">
      <Input type="password" placeholder="Password" />
      <span class="demo-label">Password</span>
    </div>
    <div class="demo-item">
      <Input type="number" placeholder="123" />
      <span class="demo-label">Number</span>
    </div>
  </div>
</div>

```svelte
<Input type="text" placeholder="Text input" />
<Input type="email" placeholder="email@example.com" />
<Input type="password" placeholder="Password" />
<Input type="number" placeholder="123" />
```

## States

<div class="demo-container">
  <div class="demo-grid">
    <div class="demo-item">
      <Input placeholder="Default state" />
      <span class="demo-label">Default</span>
    </div>
    <div class="demo-item">
      <Input placeholder="Disabled input" disabled />
      <span class="demo-label">Disabled</span>
    </div>
    <div class="demo-item">
      <Input placeholder="Required field" required />
      <span class="demo-label">Required</span>
    </div>
  </div>
</div>

```svelte
<Input placeholder="Default state" />
<Input placeholder="Disabled input" disabled />
<Input placeholder="Required field" required />
```

## With Values

<div class="demo-container">
  <div class="demo-grid">
    <div class="demo-item">
      <Input value="Pre-filled value" />
      <span class="demo-label">Pre-filled</span>
    </div>
    <div class="demo-item">
      <Input value="Read-only text" readonly />
      <span class="demo-label">Read-only</span>
    </div>
  </div>
</div>

```svelte
<Input value="Pre-filled value" />
<Input value="Read-only text" readonly />
```

## Props

| Prop | Type | Default | Description |
|------|------|---------|-------------|
| `type` | `string` | `'text'` | The input type (text, email, password, etc.) |
| `value` | `string` | `''` | The input value |
| `placeholder` | `string` | `undefined` | Placeholder text |
| `disabled` | `boolean` | `false` | Whether the input is disabled |
| `readonly` | `boolean` | `false` | Whether the input is read-only |
| `required` | `boolean` | `false` | Whether the input is required |
| `class` | `string` | `undefined` | Additional CSS classes |
| `id` | `string` | `undefined` | The input ID |
| `name` | `string` | `undefined` | The input name |

## Accessibility

- Uses semantic `<input>` element
- Supports keyboard navigation
- Works with screen readers
- Can be associated with labels using `id` and `for` attributes
- Supports all standard input attributes
- Follows WCAG 2.1 guidelines

## Events

The Input component forwards all standard input events:

- `input`
- `change`
- `focus`
- `blur`
- `keydown`
- `keyup`
- And more...

```svelte
<script>
  let inputValue = '';
</script>

<Input 
  bind:value={inputValue}
  on:input={(e) => console.log('Input changed:', e.target.value)}
  on:focus={() => console.log('Input focused')}
  on:blur={() => console.log('Input blurred')}
/>
```
