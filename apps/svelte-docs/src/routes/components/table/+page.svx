---
layout: _
---

<script>
  import { Table, Button, BodyText } from '@bios-ui/svelte';
</script>

# Table

A responsive and accessible table component for displaying structured data with proper semantic markup and styling.

## Default Table

<div class="demo-container">
  <Table>
    <thead>
      <tr>
        <th>Name</th>
        <th>Email</th>
        <th>Role</th>
        <th>Status</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>John Doe</td>
        <td>john@example.com</td>
        <td>Developer</td>
        <td>Active</td>
      </tr>
      <tr>
        <td>Jane Smith</td>
        <td>jane@example.com</td>
        <td>Designer</td>
        <td>Active</td>
      </tr>
      <tr>
        <td>Bob Johnson</td>
        <td>bob@example.com</td>
        <td>Manager</td>
        <td>Inactive</td>
      </tr>
    </tbody>
  </Table>
</div>

```svelte
<Table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Email</th>
      <th>Role</th>
      <th>Status</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>John Doe</td>
      <td>john@example.com</td>
      <td>Developer</td>
      <td>Active</td>
    </tr>
    <tr>
      <td>Jane Smith</td>
      <td>jane@example.com</td>
      <td>Designer</td>
      <td>Active</td>
    </tr>
    <tr>
      <td>Bob Johnson</td>
      <td>bob@example.com</td>
      <td>Manager</td>
      <td>Inactive</td>
    </tr>
  </tbody>
</Table>
```

## With Caption

<div class="demo-container">
  <Table>
    <caption>Employee Information</caption>
    <thead>
      <tr>
        <th>ID</th>
        <th>Name</th>
        <th>Department</th>
        <th>Salary</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>001</td>
        <td>Alice Cooper</td>
        <td>Engineering</td>
        <td>$85,000</td>
      </tr>
      <tr>
        <td>002</td>
        <td>Bob Wilson</td>
        <td>Marketing</td>
        <td>$75,000</td>
      </tr>
      <tr>
        <td>003</td>
        <td>Carol Davis</td>
        <td>Sales</td>
        <td>$65,000</td>
      </tr>
    </tbody>
  </Table>
</div>

```svelte
<Table>
  <caption>Employee Information</caption>
  <thead>
    <tr>
      <th>ID</th>
      <th>Name</th>
      <th>Department</th>
      <th>Salary</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>001</td>
      <td>Alice Cooper</td>
      <td>Engineering</td>
      <td>$85,000</td>
    </tr>
    <!-- ... more rows ... -->
  </tbody>
</Table>
```

## Complex Table with Footer

<div class="demo-container">
  <Table>
    <thead>
      <tr>
        <th>Product</th>
        <th>Category</th>
        <th>Price</th>
        <th>Stock</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>Laptop Pro</td>
        <td>Electronics</td>
        <td>$1,299</td>
        <td>15</td>
        <td>
          <Button size="small">Edit</Button>
        </td>
      </tr>
      <tr>
        <td>Wireless Mouse</td>
        <td>Electronics</td>
        <td>$29</td>
        <td>45</td>
        <td>
          <Button size="small">Edit</Button>
        </td>
      </tr>
      <tr>
        <td>Office Chair</td>
        <td>Furniture</td>
        <td>$199</td>
        <td>8</td>
        <td>
          <Button size="small">Edit</Button>
        </td>
      </tr>
    </tbody>
    <tfoot>
      <tr>
        <td colspan="3"><strong>Total Items:</strong></td>
        <td><strong>68</strong></td>
        <td></td>
      </tr>
    </tfoot>
  </Table>
</div>

```svelte
<Table>
  <thead>
    <tr>
      <th>Product</th>
      <th>Category</th>
      <th>Price</th>
      <th>Stock</th>
      <th>Actions</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Laptop Pro</td>
      <td>Electronics</td>
      <td>$1,299</td>
      <td>15</td>
      <td>
        <Button size="small">Edit</Button>
      </td>
    </tr>
    <!-- ... more rows ... -->
  </tbody>
  <tfoot>
    <tr>
      <td colspan="3"><strong>Total Items:</strong></td>
      <td><strong>68</strong></td>
      <td></td>
    </tr>
  </tfoot>
</Table>
```

## Sortable Headings

<div class="demo-container">
  <Table>
    <thead>
      <tr>
        <th>
          <button style="background: none; border: none; padding: 0; font: inherit; cursor: pointer;">
            Name ↕
          </button>
        </th>
        <th>
          <button style="background: none; border: none; padding: 0; font: inherit; cursor: pointer;">
            Date ↕
          </button>
        </th>
        <th>
          <button style="background: none; border: none; padding: 0; font: inherit; cursor: pointer;">
            Size ↕
          </button>
        </th>
        <th>Type</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>document.pdf</td>
        <td>2024-01-15</td>
        <td>2.3 MB</td>
        <td>PDF</td>
      </tr>
      <tr>
        <td>image.jpg</td>
        <td>2024-01-12</td>
        <td>1.8 MB</td>
        <td>Image</td>
      </tr>
      <tr>
        <td>report.docx</td>
        <td>2024-01-10</td>
        <td>456 KB</td>
        <td>Document</td>
      </tr>
    </tbody>
  </Table>
</div>

```svelte
<script>
  let sortColumn = '';
  let sortDirection = 'asc';
  
  function handleSort(column) {
    if (sortColumn === column) {
      sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
    } else {
      sortColumn = column;
      sortDirection = 'asc';
    }
    // Implement your sorting logic here
  }
</script>

<Table>
  <thead>
    <tr>
      <th>
        <button on:click={() => handleSort('name')}>
          Name {sortColumn === 'name' ? (sortDirection === 'asc' ? '↑' : '↓') : '↕'}
        </button>
      </th>
      <th>
        <button on:click={() => handleSort('date')}>
          Date {sortColumn === 'date' ? (sortDirection === 'asc' ? '↑' : '↓') : '↕'}
        </button>
      </th>
      <th>
        <button on:click={() => handleSort('size')}>
          Size {sortColumn === 'size' ? (sortDirection === 'asc' ? '↑' : '↓') : '↕'}
        </button>
      </th>
      <th>Type</th>
    </tr>
  </thead>
  <tbody>
    <!-- ... table rows ... -->
  </tbody>
</Table>
```

## Responsive Table

<div class="demo-container">
  <div style="overflow-x: auto;">
    <Table>
      <thead>
        <tr>
          <th>ID</th>
          <th>First Name</th>
          <th>Last Name</th>
          <th>Email Address</th>
          <th>Phone Number</th>
          <th>Department</th>
          <th>Hire Date</th>
          <th>Status</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>001</td>
          <td>John</td>
          <td>Doe</td>
          <td>john.doe@company.com</td>
          <td>+1 (555) 123-4567</td>
          <td>Engineering</td>
          <td>2023-01-15</td>
          <td>Active</td>
        </tr>
        <tr>
          <td>002</td>
          <td>Jane</td>
          <td>Smith</td>
          <td>jane.smith@company.com</td>
          <td>+1 (555) 987-6543</td>
          <td>Marketing</td>
          <td>2023-02-20</td>
          <td>Active</td>
        </tr>
      </tbody>
    </Table>
  </div>
</div>

```svelte
<!-- Wrap table in a scrollable container for responsive design -->
<div style="overflow-x: auto;">
  <Table>
    <thead>
      <tr>
        <th>ID</th>
        <th>First Name</th>
        <th>Last Name</th>
        <th>Email Address</th>
        <th>Phone Number</th>
        <th>Department</th>
        <th>Hire Date</th>
        <th>Status</th>
      </tr>
    </thead>
    <tbody>
      <!-- ... table rows ... -->
    </tbody>
  </Table>
</div>
```

## Props

| Prop | Type | Default | Description |
|------|------|---------|-------------|
| `class` | `string` | `undefined` | Additional CSS classes |

## Accessibility

- Uses semantic `<table>` element with proper structure
- Supports `<caption>` for table descriptions
- Proper heading hierarchy with `<th>` elements
- Supports `scope` attribute for complex tables
- Screen reader compatible
- Keyboard navigation support for interactive elements
- Follows WCAG 2.1 guidelines

## Advanced Features

### Table with Row Selection

```svelte
<script>
  let selectedRows = [];
  
  function toggleRow(id) {
    if (selectedRows.includes(id)) {
      selectedRows = selectedRows.filter(rowId => rowId !== id);
    } else {
      selectedRows = [...selectedRows, id];
    }
  }
</script>

<Table>
  <thead>
    <tr>
      <th>
        <input type="checkbox" />
      </th>
      <th>Name</th>
      <th>Email</th>
      <th>Role</th>
    </tr>
  </thead>
  <tbody>
    {#each users as user}
      <tr class:selected={selectedRows.includes(user.id)}>
        <td>
          <input 
            type="checkbox" 
            checked={selectedRows.includes(user.id)}
            on:change={() => toggleRow(user.id)}
          />
        </td>
        <td>{user.name}</td>
        <td>{user.email}</td>
        <td>{user.role}</td>
      </tr>
    {/each}
  </tbody>
</Table>
```

### Empty State

```svelte
<Table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Email</th>
      <th>Role</th>
    </tr>
  </thead>
  <tbody>
    {#if data.length === 0}
      <tr>
        <td colspan="3" style="text-align: center; padding: 2rem;">
          <BodyText>No data available</BodyText>
        </td>
      </tr>
    {/if}
  </tbody>
</Table>
```

## Best Practices

- Always include proper table headers (`<th>`) for accessibility
- Use `<caption>` to provide context for the table content
- Implement responsive design for tables with many columns
- Consider pagination for large datasets
- Provide sorting and filtering capabilities when appropriate
- Use semantic markup for better screen reader support
- Ensure sufficient color contrast for table content
- Include loading states for dynamic data
